<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Wook&#39;s blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Wook&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>leewookb@gmail.com (Wook Lee)</managingEditor>
    <webMaster>leewookb@gmail.com (Wook Lee)</webMaster>
    <lastBuildDate>Sat, 17 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[OverTheWire] Bandit 18-34</title>
      <link>http://localhost:1313/posts/overthewire-bandit-18-34/</link>
      <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><author>leewookb@gmail.com (Wook Lee)</author>
      <guid>http://localhost:1313/posts/overthewire-bandit-18-34/</guid>
      <description>&lt;h4 id=&#34;level-17---18&#34;&gt;Level 17 -&amp;gt; 18&lt;/h4&gt;
&lt;p&gt;There are 2 files in the homedirectory: passwords.old and passwords.new. The password for the next level is in passwords.new and is the only line that has been changed between passwords.old and passwords.new&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image.png#center&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;
&lt;p&gt;As stated in the question, my job was to find the line that had been changed between &lt;strong&gt;passwords.old&lt;/strong&gt; file and &lt;strong&gt;passwords.new&lt;/strong&gt; file. We can utilize the &lt;code&gt;diff&lt;/code&gt; command to solve this question.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h4 id="level-17---18">Level 17 -&gt; 18</h4>
<p>There are 2 files in the homedirectory: passwords.old and passwords.new. The password for the next level is in passwords.new and is the only line that has been changed between passwords.old and passwords.new</p>
<p><img src="image.png#center" alt="alt text"></p>
<p>As stated in the question, my job was to find the line that had been changed between <strong>passwords.old</strong> file and <strong>passwords.new</strong> file. We can utilize the <code>diff</code> command to solve this question.</p>
<p>the output <code>42c42</code> indicates that there is a change on line 42 of both files.</p>
<ul>
<li>The first <code>42</code> refers to line 42 in the <strong>passwords.new</strong> file.</li>
<li>The second <code>42</code> refers to line 42 in the <strong>passwords.old</strong> file.</li>
<li>The <code>c</code> between them stands for &ldquo;change&rdquo;.</li>
</ul>
<p><code>&lt; x2gLTTjFwMOhQ8oWNbMN362QKxfRqGlO</code> This line shows the content of line 42 in the <strong>passwords.new</strong> file.</p>
<p><code>&gt; bSrACvJvvBSxEM2SGsV5sn09vc3xgqyp</code> This line shows the content of line 42 in the <strong>passwords.old</strong> file.</p>
<p><strong><em>password</em></strong>: <code>x2gLTTjFwMOhQ8oWNbMN362QKxfRqGlO</code></p>
<hr>
<h4 id="level-18---19">Level 18 -&gt; 19</h4>
<p>The password for the next level is stored in a file readme in the homedirectory. Unfortunately, someone has modified .bashrc to log you out when you log in with SSH.</p>
<p><img src="image-1.png#center" alt="alt text">
As stated in the question, we are not able to login to the bash shell becausome someone has modified the <strong>.bashrc</strong> file.</p>
<br>
<p><img src="image-2.png#center" alt="alt text">
I learned that under the <strong>/etc/shells</strong> directory, the details of all the shells that are available on a system is stored there. These are the shells I can use on my local system.</p>
<br>
<p><img src="image-3.png#center" alt="alt text">
Also the man page of <strong>ssh</strong> command explains that <code>-t</code> option is used to specify the shell to be used to login to the system.</p>
<br>
<p><img src="image-5.png#center" alt="alt text">
Combined everything, the following command allowed me to login to the server as <strong>bandit18</strong> and found the password for the next level.</p>
<p><code>ssh bandit18@bandit.labs.overthewire.org -p 2220 -t &quot;/bin/sh&quot;</code></p>
<br>
<p><strong><em>password</em></strong>: <code>cGWpMaKXVwDUNgPAVJbWYuGHVn9zl3j8</code></p>
<hr>
<h4 id="level-19---20">Level 19 -&gt; 20</h4>
<p>To gain access to the next level, you should use the setuid binary in the homedirectory. Execute it without arguments to find out how to use it. The password for this level can be found in the usual place (/etc/bandit_pass), after you have used the setuid binary.</p>
<p><img src="image-6.png#center" alt="alt text">
confirmed the setuid binary existed inside the directory</p>
<br>
<p><img src="image-7.png#center" alt="alt text">
executed the file without any arugument to find out how to use it. Following the example, I noticed that the username associated with the euid is <strong>bandit20</strong> while all other IDs are associated with the username <strong>bandit19</strong>. The <code>euid</code> or <code>effective user ID</code> is used for <strong><em>privilege checks during execution</em></strong> meaning we can run commands as if we were the bandit20 user.</p>
<br>
<p><img src="image-8.png#center" alt="alt text">
looked up the password of bandit20 user with the SUID binary.</p>
<p><strong><em>password</em></strong>: <code>0qXahG8ZjOVMN9Ghs7iOWsCfZyXOUbYO</code></p>
<hr>
<h4 id="level-20---21">Level 20 -&gt; 21</h4>
<p>There is a setuid binary in the homedirectory that does the following: it makes a connection to localhost on the port you specify as a commandline argument. It then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct, it will transmit the password for the next level (bandit21).</p>
<p>NOTE: Try connecting to your own network daemon to see if it works as you think</p>
<p><img src="image-9.png#center" alt="alt text">
For this level, I found using <code>tmux</code> very useful because it allows you to create multiple panes on one window, making it easy to swtich between them. The question hints that we have to make a connection to localhost so I set up a listener on the local as you can see in the right pane.</p>
<br>
<p><img src="image-10.png#center" alt="alt text">
Then I ran the SUID binary by running the command with the port number 1234 as the argument <code>./suconnect 1234</code> and the connection was successfully made.</p>
<br>
<p><img src="image-11.png#center" alt="alt text">
It prompted me to input the password, which I did. The message &ldquo;Password matches, sending next password&rdquo; was returned in the left pane and the password for the next level appeared in the right pane.</p>
<br>
<p><strong><em>password</em></strong>: <code>EeoULMCra2q0dSkYj561DX7s1CpBuOBt</code></p>
<hr>
<h4 id="level-21---22">Level 21 -&gt; 22</h4>
<p>A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.</p>
<p><img src="image-12.png#center" alt="alt text">
Inside the <strong>/etc/cron.d</strong> directory, there were multiple files but the file that we are interested in is <strong><em>cronjob_bandit22</em></strong>.</p>
<br>
<p><img src="image-13.png#center" alt="alt text">
The <strong><em>cronjob_bandit22</em></strong> file is scheduled to run at two intervals.</p>
<ol>
<li><code>@reboot</code>: runs the specified command when the system reboots.</li>
<li><code>* * * * *</code>: Runs the specified command every minute.</li>
</ol>
<p>The scheduled command is that the user <strong>bandit22</strong> is running the <strong><em>cronjob_bandit22.sh</em></strong> file and any output is redirected to <strong>/dev/null</strong>, which means it is discarded.</p>
<p>I looked inside the <strong><em>.sh</em></strong> file and found that it stores the password for bandit22 in the following path: <strong><em>/tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv</em></strong>.</p>
<br>
<p><img src="image-14.png#center" alt="alt text">
All that&rsquo;s left for us to do is look inside that file to retrieve the bandit22&rsquo;s password.</p>
<p><strong><em>password</em></strong>: <code>tRae0UfB9v0UzbCdn9cY0gQnds9GF58Q</code></p>
<hr>
<h4 id="level-22---23">Level 22 -&gt; 23</h4>
<p>A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.</p>
<p><img src="image-15.png#center" alt="alt text">
This time we need to examine the <strong><em>cronjob_bandit23</em></strong> file inside the <strong><em>/etc/cron.d</em></strong> directory. Just like the previous question, the cronjob is scheduled to execute the following shell script: <strong>/usr/bin/cronjob_bandit23.sh</strong>.</p>
<br>
<p><img src="image-16.png#center" alt="alt text">
Let&rsquo;s break down the shell script.</p>
<ul>
<li><code>md5sum</code>: calculates the MD5 hash of the input string.</li>
<li><code>cut -d ' ' -f 1</code>: The <strong>cut</strong> command is used to split the input into sections based on a delimiter.
<ul>
<li><code>-d ' '</code>: specifies that the delimiter is a space character.</li>
<li><code>-f 1</code>: specifies that you want to select the first field.</li>
</ul>
</li>
</ul>
<p>The entire command generates the MD5 hash of the string <code>I am user &lt;CURRENT USER&gt;</code> and then extracts and displays only the hash value and then stores the current user&rsquo;s password inside the following location: <strong>/tmp/&lt;MD5_HASH&gt;</strong></p>
<br>
<p><img src="image-17.png#center" alt="alt text">
So all I had to do was replace the <code>$myname</code> variable with <code>bandit23</code> and run the command because I am currently looking for bandit23&rsquo;s password. It will return the md5 hash which is actually going to be the name of the file which stores bandit23&rsquo;s password.</p>
<p><strong><em>password</em></strong>: <code>0Zf11ioIjMVN551jX3CmStKLYqjk54Ga</code></p>
<hr>
<h4 id="level-23---24">Level 23 -&gt; 24</h4>
<p>A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.</p>
<p><img src="image-18.png#center" alt="alt text">
you can see that we can execute the shell file as the <strong><em>bandit24</em></strong> user</p>
<br>
<p><img src="image-19.png#center" alt="alt text">
The code does exactly what the echo command says: <strong><em>Execute and delete all scripts in /var/spool/$myname/foo</em></strong>. In this case, the <code>myname</code> variable refers to <strong>bandit24</strong>.</p>
<br>
<p><img src="image-20.png#center" alt="alt text">
confirmed that anyone can create files inside the <code>/var/spool/bandit24/foo</code> directory.</p>
<br>
<p><img src="image-23.png#center" alt="alt text">
I created a <strong>tmp directory</strong> using the command <code>mktemp -d</code>, which automatically generated a directory named <code>tmp.ajuCmrTuOu</code>. Inside this directory, I created a file containing the code to retrieve the password for bandit24 and stored it in a file named <strong>password</strong> within the tmp directory.</p>
<br>
<p><img src="image-24.png#center" alt="alt text">
Made sure the tmp directory and files are accessible by giving them 777 permissions.</p>
<br>
<p><img src="image-25.png#center" alt="alt text">
I copied the file containing the code to retrieve the password to the path <code>/var/spool/bandit24/foo/</code>. This is the directory where all scripts will be executed and deleted. After this, you can wait for a minute and then read the password file to get the password for bandit24, as this is a cronjob that runs every minute.</p>
<br>
<p><strong><em>password</em></strong>: <code>gb8KRRCsshuZXI0tUuR6ypOFjiZbf3G8</code></p>
<hr>
<h4 id="level-24---25">Level 24 -&gt; 25</h4>
<p>A daemon is listening on port 30002 and will give you the password for bandit25 if given the password for bandit24 and a secret numeric 4-digit pincode. There is no way to retrieve the pincode except by going through all of the 10000 combinations, called brute-forcing.
You do not need to create new connections each time</p>
<p><img src="image-28.png#center" alt="alt text">
When you connect to port 30002, you will be prompted to input <strong><em>bandit24&rsquo;s password</em></strong> followed by a secret numeric <strong><em>4-digit pincode</em></strong> seaparated by a space. If either is incorrect, you will receive an error message and be prompted to try again.</p>
<br>
<p><img src="image-30.png#center" alt="alt text">
Again, I made a tmp directory by running the <code>mktemp -d</code> command and wrote a bash script that iterates from 0000 to 9999 prepending each value with the bandit24 password. Each combination is stored in a file named <strong>bruteforce.txt</strong>.</p>
<p>Once all possibilites are written, the script connects to the port and inputs each entry of the bruteforce, logging the output of each attempt into a <strong>result.txt</strong> file.</p>
<br>
<p><img src="image-31.png#center" alt="alt text">
Before running the bash script, I gave it the <strong>executable</strong> permission.</p>
<br>
<p><img src="image-32.png#center" alt="alt text">
This is the content of the <strong>bruteforce.txt</strong> file after running the bash script. Notice the scroll bar on the right is very small because of 10,000 possible entries.</p>
<br>
<p><img src="image-33.png#center" alt="alt text">
This is the content of the <strong>result.txt</strong> file after running the bash script completion. Notice it returned <strong>Wrong! &hellip;</strong> for every entry with an incorrect pincode but the last entry returned <strong>Correct!</strong> along with the password for bandit25.</p>
<br>
<p><img src="image-34.png#center" alt="alt text">
Another way to find the password for bandit25 is by using the <code>grep</code> command. The <code>-v</code> flag inverts the match, meaning it will select lines that do <strong><em>NOT</em></strong> match the pattern. We saw that for every entry that had the either wrong password or pincode returned the string &ldquo;Wrong&rdquo;, we can leverage this to find any line that does not include the pattern by using the option <code>-v</code>.</p>
<p><strong><em>password</em></strong>: <code>iCi86ttT4KSNe1armKiwbQNmB3YJP3q4</code></p>
<hr>
<h4 id="level-25---26">Level 25 -&gt; 26</h4>
<p>Logging in to bandit26 from bandit25 should be fairly easy… The shell for user bandit26 is not /bin/bash, but something else. Find out what it is, how it works and how to break out of it.</p>
<p><img src="image-35.png#center" alt="alt text">
When logged in as bandit25, we have the <strong>bandit26.sshkey</strong> inside the home directory.</p>
<br>
<p><img src="image-36.png#center" alt="alt text">
Transferred the keyfile to my local environment using the <strong><em>scp</em></strong> command.</p>
<br>
<p><img src="image-37.png#center" alt="alt text">
In order to login with the key file, you have to change the file permissions so that only the user has permissions to read/write/execute the file.</p>
<br>
<p><img src="image-38.png#center" alt="alt text">
However, the server automatically kicked me out.</p>
<br>
<p><img src="image-39.png#center" alt="alt text">
We have to remember that each user in SSH has a default shell. The <strong><em>/etc/passwd</em></strong> file displays what shell is the default for a user. As you can see, bandit26 user has <strong>/bin/showtext</strong> shell as the default.</p>
<br>
<p><img src="image-40.png#center" alt="alt text">
We can see that the script opens a file called <strong><em>text.txt</em></strong> with the <strong><em>more</em></strong> program.</p>
<br>
<p><img src="image-41.png#center" alt="alt text">
In order to make the <strong>more</strong> program run, we need to make the window smaller, then try logging in.</p>
<br>
<p><img src="image-42.png#center" alt="alt text">
As you can see when we made the terminal window smaller, the <strong>more</strong> program will go into command mode.</p>
<br>
<p><img src="image-43.png#center" alt="alt text">
From there, we can then use <code>v</code> to go into vim and rescale the window back.</p>
<br>
<p><img src="image-44.png#center" alt="alt text">
To use the shell on vim, type <code>set shell=/bin/bash</code> and then use <code>:shell</code>. After getting the shell, I navigated to the <code>/etc/bandit_pass/bandit26</code> file to get the password for bandit26.</p>
<br>
<p><strong><em>password</em></strong>: <code>s0773xxkk0MXfdqOfPRVr9L3jJBUOgCZ</code></p>
<hr>
<h4 id="level-26---27">Level 26 -&gt; 27</h4>
<p>Good job getting a shell! Now hurry and grab the password for bandit27!</p>
<p><img src="image-45.png#center" alt="alt text"></p>
<br>
<p><img src="image-46.png#center" alt="alt text"></p>
<br>
<p><strong><em>password</em></strong>: <code>upsNCc7vzaRDx6oZC6GiR6ERwe1MowGB</code></p>
<hr>
<h4 id="level-27---28">Level 27 -&gt; 28</h4>
<p>There is a git repository at ssh://bandit27-git@localhost/home/bandit27-git/repo via the port 2220. The password for the user bandit27-git is the same as for the user bandit27.</p>
<p>Clone the repository and find the password for the next level.</p>
<p><img src="image-47.png#center" alt="alt text">
I had to make a temporary directory inside the <code>/tmp</code> directory because the I did not have the permission to write in the <code>home</code> directory.</p>
<br>
<p><img src="image-48.png#center" alt="alt text">
Failed to connect to the ssh server because I forgot to specify the port number 2220.</p>
<br>
<p><img src="image-49.png#center" alt="alt text">
updated my command as the following:
<code>git clone ssh://bandit27-git@localhost:2220/home/bandit27-git/repo</code></p>
<br>
<p><img src="image-50.png#center" alt="alt text">
Successfully cloned the git repo and there was <code>README</code> file, which contained the password for the next level, inside the <code>repo</code> directory.</p>
<br>
<p><strong><em>password</em></strong>: <code>Yz9IpL0sBcCeuG7m9uQFt8ZNpS4HZRcN</code></p>
<hr>
<h4 id="level-28---29">Level 28 -&gt; 29</h4>
<p>There is a git repository at ssh://bandit28-git@localhost/home/bandit28-git/repo via the port 2220. The password for the user bandit28-git is the same as for the user bandit28.</p>
<p>Clone the repository and find the password for the next level.</p>
<p><img src="image-51.png#center" alt="alt text">
Since the question is exactly the same as the previous question except the bandit user#, I repeated the same process by making a temporary directory and cloned the repo.</p>
<br>
<p><img src="image-52.png#center" alt="alt text">
Interestingly, the password inside <code>README.md</code> was censored.</p>
<br>
<p><img src="image-53.png#center" alt="alt text">
As expected, the censored password, <code>xxxxxxx</code> did not work.</p>
<br>
<p><img src="image-55.png#center" alt="alt text">
Since we know this question is related to <code>git</code>, I tried to look for submissions to the repo by typing <code>git log</code> and it showed three commits. The comment <code>fix info leak</code> maybe refers to censoring the leaked password.</p>
<br>
<p><img src="image-56.png#center" alt="alt text">
I used the <code>git checkout</code> command to check the previous commit to verify if my hypothesis was correct.</p>
<br>
<p><img src="image-57.png#center" alt="alt text">
Now we are on the previous version of the repo, I used the <code>cat</code> command to check out the readme file.</p>
<p>And! There was the uncensored password for bandit29.</p>
<br>
<p><strong><em>password</em></strong>: <code>4pT1t5DENaYuqnqvadYs1oE4QLCdjmJ7</code></p>
<hr>
<h4 id="level-29---30">Level 29 -&gt; 30</h4>
<p>There is a git repository at ssh://bandit29-git@localhost/home/bandit29-git/repo via the port 2220. The password for the user bandit29-git is the same as for the user bandit29.</p>
<p>Clone the repository and find the password for the next level.</p>
<p><img src="image-58.png#center" alt="alt text">
Before we clone the repository, we already know that we have to make a temporary directory because we don&rsquo;t have permission to write in the home directory.</p>
<br>
<p><img src="image-59.png#center" alt="alt text">
after cloning the repository, I navigated inside the repo folder and there was <strong>README.md</strong> file just like the two previous questions. This time there was a message saying <strong>no passwords in production!</strong> I thought the message implies there are more branches to this repo.</p>
<br>
<p><img src="image-60.png#center" alt="alt text">
As you can see from the screenshot above, my theory was correct. The difference between <code>git branch</code> and <code>git branch -a</code>is that the former only shows local branches and the latter shows not only local but also remote branches.</p>
<br>
<p><img src="image-61.png#center" alt="alt text">
I switched branch to <code>origin/dev</code> by running <code>git checkout origin/dev</code> command and checked out the content of README.md file and it contained the password for the next level as expected.</p>
<br>
<p><strong><em>password</em></strong>: <code>qp30ex3VLz5MDG1n91YowTv4Q8l7CDZL</code></p>
<hr>
<h4 id="level-30---31">Level 30 -&gt; 31</h4>
<p>There is a git repository at ssh://bandit30-git@localhost/home/bandit30-git/repo via the port 2220. The password for the user bandit30-git is the same as for the user bandit30.</p>
<p>Clone the repository and find the password for the next level.</p>
<p><img src="image-62.png#center" alt="alt text">
Just like we did for the past few <code>git</code> related questions, we first have to create a <strong>tmp</strong> directory in order to clone the repo because we do not have the permission to <strong><em>write</em></strong> in the home directory.</p>
<br>
<p><img src="image-63.png#center" alt="alt text">
the <strong>README.md</strong> file does not have any useful info but says that it&rsquo;s an empty file.</p>
<br>
<p><img src="image-65.png#center" alt="alt text"></p>
<p><code>git log</code> and <code>git branch -a</code> commands also did not reveal any useful information. I was absolutely lost and didn&rsquo;t know how to proceed from here.</p>
<br>
<p><img src="image-66.png#center" alt="alt text"></p>
<p>I researched online and found that there&rsquo;s <code>git tag</code> command that&rsquo;s used to create, list, delete, or verify tags in a Git repository and tags are often used to mark specific points in a repo&rsquo;s history, like releases or important milestones.</p>
<p><code>git tag</code> command revealed a tag named <strong>secret</strong>. In order to display the content, we have to use <code>git show</code> command.</p>
<p><code>git show</code> command is used to display detailed information about various Git objects, such as commits, tags, or trees.</p>
<p>If you have annotated a tag, this command will display the tag&rsquo;s metadata.</p>
<br>
<p><strong><em>password</em></strong>: <code>fb5S2xb7bRyFmAvQYQGEqsbhVyJqhnDy</code></p>
<hr>
<h4 id="level-31---32">Level 31 -&gt; 32</h4>
<p>There is a git repository at ssh://bandit31-git@localhost/home/bandit31-git/repo via the port 2220. The password for the user bandit31-git is the same as for the user bandit31.</p>
<p>Clone the repository and find the password for the next level.</p>
<p><img src="image-67.png#center" alt="alt text">
Same steps as before</p>
<br>
<p><img src="image-68.png#center" alt="alt text">
This time the <strong>README.md</strong> file tells us to push a file to the remote repository.</p>
<br>
<p><img src="image-69.png#center" alt="alt text">
Created a file named <strong>key.txt</strong> with the message, <strong><em>May I come in?</em></strong></p>
<br>
<p><img src="image-70.png#center" alt="alt text">
However, when pushed to master branch, it returns <strong>Everything up-to-date</strong>. This is strange because I definitely created a new file and made some modifications to the repo.</p>
<br>
<p><img src="image-71.png#center" alt="alt text">
The command <code>ls -la</code> revealed that there was <strong>.gitignore</strong> file and it&rsquo;s ignoring every file with <strong>.txt</strong> extension.</p>
<p>A <strong>.gitignore</strong> file is used in Git to specify files and directories that should be ignored by Git. Any files or directories listed in a <strong>.gitignore</strong> file will not be tracked by Git, even if they are in your project directory.</p>
<br>
<p><img src="image-72.png#center" alt="alt text">
replaced <strong>.txt</strong> with whitespaces.</p>
<br>
<p><img src="image-73.png#center" alt="alt text">
Now the changes I made are being tracked by Git.</p>
<br>
<p><img src="image-74.png#center" alt="alt text">
When pushed to the remote <strong><em>master</em></strong> branch, it returned the password for the next level.</p>
<br>
<p><strong><em>password</em></strong>: <code>3O9RfhqyAlVBEZpVb6LYStshZoqoSx5K</code></p>
<hr>
<h4 id="level-32---33">Level 32 -&gt; 33</h4>
<p>After all this git stuff, it’s time for another escape. Good luck!</p>
<p><img src="image-75.png#center" alt="alt text">
This level looked very different from the previous questions. The shell says <strong>WELCOME TO THE UPPERCASE SHELL</strong>.</p>
<br>
<p><img src="image-76.png#center" alt="alt text">
just like its name implied, the shell converts every input to uppercase letters. Because of that reason, every command did not work.</p>
<br>
<p><img src="image-77.png#center" alt="alt text">
I tried the <code>$0</code> command since it does not contain any letter, there&rsquo;s nothing to convert to uppercase letters.</p>
<p><code>$0</code> is a special parameter. It represents the name of the script or shell being executed. When you type <code>$0</code>, it might return the name of the shell or script that is running.</p>
<p>In our case, it seems to have triggered a change in the shell environment because the prompt changed from <code>&gt;&gt;</code> to <code>$</code>.</p>
<p>And now the commands worked as it was supposed to. It&rsquo;s interesting that <code>whoami</code> returned that we are currently <strong>bandit33</strong> meaning that we can directly access the bandit33&rsquo;s password as the current user.</p>
<br>
<p><img src="image-78.png#center" alt="alt text"></p>
<br>
<p><strong><em>password</em></strong>: <code>tQdtbs5D5i2vJwkO8mEyYEyTL8izoeJ0</code></p>
<hr>
<h4 id="level-33---34">Level 33 -&gt; 34</h4>
<p>At this moment, level 34 does not exist yet.</p>
<p><img src="image-79.png#center" alt="alt text"></p>
<p>YAY!</p>
]]></content:encoded>
    </item>
    <item>
      <title>[OverTheWire] Bandit 0-17</title>
      <link>http://localhost:1313/posts/overthewire-bandit-0-17/</link>
      <pubDate>Wed, 14 Aug 2024 00:00:00 +0000</pubDate><author>leewookb@gmail.com (Wook Lee)</author>
      <guid>http://localhost:1313/posts/overthewire-bandit-0-17/</guid>
      <description>&lt;h4 id=&#34;level-0&#34;&gt;Level 0&lt;/h4&gt;
&lt;p&gt;The goal of this level is for you to log into the game using SSH. The host to which you need to connect is bandit.labs.overthewire.org, on port 2220. The username is bandit0 and the password is bandit0. Once logged in, go to the Level 1 page to find out how to beat Level 1.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh bandit0@bandit.labs.overthewire.org -p 2220&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;level-0---1&#34;&gt;Level 0 -&amp;gt; 1&lt;/h4&gt;
&lt;p&gt;The password for the next level is stored in a file called readme located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH (on port 2220) to log into that level and continue the game.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h4 id="level-0">Level 0</h4>
<p>The goal of this level is for you to log into the game using SSH. The host to which you need to connect is bandit.labs.overthewire.org, on port 2220. The username is bandit0 and the password is bandit0. Once logged in, go to the Level 1 page to find out how to beat Level 1.</p>
<p><code>ssh bandit0@bandit.labs.overthewire.org -p 2220</code></p>
<hr>
<h4 id="level-0---1">Level 0 -&gt; 1</h4>
<p>The password for the next level is stored in a file called readme located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH (on port 2220) to log into that level and continue the game.</p>
<p><code>ssh bandit1@bandit.labs.overthewire.org -p 2220</code></p>
<p><img src="image.png#center" alt="alt text"></p>
<p><strong><em>password</em></strong>: <code>ZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If</code></p>
<hr>
<h4 id="level-1---2">Level 1 -&gt; 2</h4>
<p>The password for the next level is stored in a file called &ldquo;-&rdquo; located in the home directory</p>
<p><img src="image-1.png#center" alt="alt text"></p>
<p><strong><em>password</em></strong>: <code>263JGJPfgU6LtdEvgfWU1XP5yac29mFx</code></p>
<hr>
<h4 id="level-2---3">Level 2 -&gt; 3</h4>
<p>The password for the next level is stored in a file called spaces in this filename located in the home directory</p>
<p><img src="image-2.png#center" alt="alt text"></p>
<p><strong><em>password</em></strong>: <code>MNk8KNH3Usiio41PRUEoDFPqfxLPlSmx</code></p>
<hr>
<h4 id="level-3---4">Level 3 -&gt; 4</h4>
<p>The password for the next level is stored in a hidden file in the inhere directory.</p>
<p><img src="image-3.png#center" alt="alt text"></p>
<p><strong><em>password</em></strong>: <code>2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ</code></p>
<hr>
<h4 id="level-4---5">Level 4 -&gt; 5</h4>
<p>The password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the “reset” command.</p>
<p><img src="image-5.png#center" alt="alt text"></p>
<p>The <code>file ./*</code> command returned that the <strong>file#7</strong> has a different file format from the rest of the files. The <strong><em>ASCII text</em></strong> is also a human-readable file format.</p>
<p><strong><em>password</em></strong>: <code>4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw</code></p>
<hr>
<h4 id="level-5---6">Level 5 -&gt; 6</h4>
<p>The password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties:</p>
<ul>
<li>human-readable</li>
<li>1033 bytes in size</li>
<li>not executable</li>
</ul>
<p><img src="image-6.png#center" alt="alt text"></p>
<br>
<p><img src="image-7.png#center" alt="alt text">
The reason I appended <strong>&lsquo;c&rsquo;</strong> after 1033 could be found under the <strong>find</strong>&rsquo;s <strong>man</strong> page.</p>
<br>
<p><strong><em>password</em></strong>: <code>HWasnPhtq9AVKe0dmk45nxy20cvUa6EG</code></p>
<hr>
<h4 id="level-6---7">Level 6 -&gt; 7</h4>
<p>The password for the next level is stored somewhere on the server and has all of the following properties:</p>
<ul>
<li>owned by user bandit7</li>
<li>owned by group bandit6</li>
<li>33 bytes in size</li>
</ul>
<p><img src="image-8.png#center" alt="alt text">
There wasn&rsquo;t any directory or file inside the <strong>bandit6</strong> directory.</p>
<br>
<p><img src="image-9.png#center" alt="alt text">
So I moved up a directory and run the following command: <code>find /home/ -user bandit7 -group bandit6 -size 33c</code>. The command returned some outputs but I did not have a permission to access any of them. So I decided to navigate to the parent directory of the current working directory once again.</p>
<br>
<p><img src="image-10.png#center" alt="alt text">
The code returned too many outputs that I did not want to waste my time reading one by one to find the answer so I appended the following code to only return ones without errors. <code>2&gt;/dev/null</code>.</p>
<br>
<p><img src="image-11.png#center" alt="alt text">
Got the password!</p>
<br>
<p><strong><em>password</em></strong>: <code>morbNTDkSW6jIlUc0ymOdMaLnOlFVAaj</code></p>
<hr>
<h4 id="level-7---8">Level 7 -&gt; 8</h4>
<p>The password for the next level is stored in the file data.txt next to the word millionth</p>
<p><img src="image-12.png#center" alt="alt text"></p>
<p><strong><em>password</em></strong>: <code>dfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc</code></p>
<hr>
<h4 id="level-8---9">Level 8 -&gt; 9</h4>
<p>The password for the next level is stored in the file data.txt and is the only line of text that occurs only once</p>
<p><img src="image-13.png#center" alt="alt text"></p>
<p><img src="image-14.png#center" alt="alt text"></p>
<p><img src="image-15.png#center" alt="alt text"></p>
<p><strong><em>password</em></strong>: <code>4CKMh1JI91bUIZZPXDqGanal4xvAg0JM</code></p>
<hr>
<h4 id="level-9---10">Level 9 -&gt; 10</h4>
<p>The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‘=’ characters.</p>
<p><img src="image-16.png#center" alt="alt text"></p>
<p><img src="image-17.png#center" alt="alt text"></p>
<p><strong><em>password</em></strong>: <code>FGUW5ilLVJrxX9kMYMmlN4MgbpfMiqey</code></p>
<hr>
<h4 id="level-10---11">Level 10 -&gt; 11</h4>
<p>The password for the next level is stored in the file data.txt, which contains base64 encoded data</p>
<p><img src="image-18.png#center" alt="alt text"></p>
<p><strong><em>password</em></strong>: <code>dtR173fZKb0RRsDFSGsg2RWnpNVj3qRr</code></p>
<hr>
<h4 id="level-11---12">Level 11 -&gt; 12</h4>
<p>The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions.</p>
<p><img src="image-19.png#center" alt="alt text">
We have to first understand what <strong>ROT13</strong> is before we solve this question. According to the <strong><em>Wikipedia</em></strong>, <strong>ROT13</strong> is a simple letter subsitution cipher that replaces a letter with the 13th letter after it in the Latin alphabet.</p>
<br>
<p><img src="image-20.png#center" alt="alt text">
<code>tr 'A-Za-z' 'N-ZA-Mn-za-m'</code>: This command tells <strong>tr</strong> to replace each letter in the first set (<code>A-Za-z</code>) with the corresponding letter in the second set (<code>N-ZA-Mn-za-m</code>), effectively rotating the alphabet by 13 positions.</p>
<br>
<p><strong><em>password</em></strong>: <code>7x16WNeHIi5YkIhWsfFIqoognUTyj9Q4</code></p>
<hr>
<h4 id="level-12---13">Level 12 -&gt; 13</h4>
<p>The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work. Use mkdir with a hard to guess directory name. Or better, use the command “mktemp -d”. Then copy the datafile using cp, and rename it using mv (read the manpages!)</p>
<p><img src="image-21.png#center" alt="alt text">
While researching about this question, I kept encountering the command <code>xxd</code> and I learned the following:
The <code>xxd</code> command in linux is a powerful utility for creating a hexadecimal (<strong>hex</strong>) dump of a given file. <strong><em>It also allows you to reverse the operation, converting a hex dump back into the original binary form</em></strong>.</p>
<br>
<p><code>-r</code> is the Reverse operation.</p>
<p><img src="image-22.png#center" alt="alt text">
<strong><em>Permission denied</em></strong> because the guest user <strong>bandit12</strong> does not have the permission to <strong>write</strong> in the current directory.</p>
<br>
<p><img src="image-23.png#center" alt="alt text">
as suggested in the question, I will create the original file inside the <strong>tmp</strong> file since anyone can write inside the file.</p>
<br>
<p><img src="image-24.png#center" alt="alt text"></p>
<p><img src="image-25.png#center" alt="alt text">
Decompressed the hexdump file and it&rsquo;s now <strong>gzip</strong> compressed data. I renamed the file as <code>convert_back.gz</code> and decompressed it with the following command: <code>gunzip convert_back.gz</code>.</p>
<p>It now became a <code>bzip2</code> compressed data.</p>
<br>
<p><img src="image-26.png#center" alt="alt text">
decompressed back the file using <code>bunzip2</code> command and once again it&rsquo;s a <strong>gzip</strong> file.</p>
<br>
<p><img src="image-27.png#center" alt="alt text">
To decompress and extract the contents of a <strong>POSIX tar archive file</strong>, you can use the <code>tar</code> command.</p>
<br>
<p><img src="image-28.png#center" alt="alt text">
From there the process of decompressing files continued until the file format turned out to be <strong>ASCII text</strong>.</p>
<br>
<p><strong><em>Password</em></strong>: <code>FO5dwFsc0cbaIiH0h8J2eUks2vdTDwAn</code></p>
<hr>
<h4 id="level-13---14">Level 13 -&gt; 14</h4>
<p>The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working on</p>
<p><img src="image-29.png#center" alt="alt text">
Inside the <strong>bandit13</strong> directory, there was this <strong><em>ssh private key</em></strong>. As stated in the question, there is no password inside this directory but this private file. We have to figure a way to login as <strong>bandit14</strong> using the private key.</p>
<br>
<p><img src="image-30.png#center" alt="alt text">
I logged out of the ssh server and downloaded the private key from the ssh server to the localhost using the <code>scp</code> command.</p>
<p><code>scp -P 2220 bandit13@bandit.labs.overthewire.org:/home/bandit13/sshkey.private ~/Desktop</code></p>
<br>
<p><img src="image-31.png#center" alt="alt text">
<code>man ssh</code> shows that we can utilize the <code>-i</code> option when logging into the ssh server using a private key without password.</p>
<br>
<p><img src="image-32.png#center" alt="alt text">
Logging into the SSH server failed because the file permissions were too open. <strong><em>It is required that your private key files are NOT accessible by others.</em></strong></p>
<br>
<p><img src="image-33.png#center" alt="alt text">
<code>chmod 700 sshkey.private</code></p>
<p>I made the file only accessible by the user using the <code>chmod 700</code> command above and succeeded in logging into the server.</p>
<br>
<p><img src="image-34.png#center" alt="alt text">
As written in the question, the password was located in the following path, <strong>/etc/bandit_pass/bandit14</strong> and it was only accessible by user <strong>bandit14</strong>. Since I logged in as bandit14, I could obtain the password.</p>
<br>
<p><strong><em>password</em></strong>: <code>MU4VWeTyJk8ROof1qqmcBPaLh7lDCPvS</code></p>
<hr>
<h4 id="level-14---15">Level 14 -&gt; 15</h4>
<p>The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.</p>
<p><img src="image-35.png#center" alt="alt text"></p>
<br>
<p><strong><em>password</em></strong>: <code>8xCjnmgoKbGLhHFAZlGE5Tmu4M2tKJQo</code></p>
<hr>
<h4 id="level-15---16">Level 15 -&gt; 16</h4>
<p>The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL/TLS encryption.</p>
<p>Helpful note: Getting “DONE”, “RENEGOTIATING” or “KEYUPDATE”? Read the “CONNECTED COMMANDS” section in the manpage.</p>
<p><code>openssl s_client -connect localhost:30001</code></p>
<ul>
<li><code>openssl</code>: OpenSSL is widely used for implementing SSL/TLS protocols and managing certificates, keys, and other cryptographic operations.</li>
<li><code>s_client</code>: This a subcommand within <strong><em>opnessl</em></strong> that allows you to connect to a remote server over <strong>SSL/TLS</strong>.</li>
</ul>
<p>When you run the full command, it initiates an SSL/TLS handshake with the server at <strong>localhost</strong> on port <strong>30001</strong>. Once the connection is established, <strong>openssl s_client</strong> will display various details about the connection, including the server&rsquo;s certificate, the cipher being used, and other SSL/TLS parameters.</p>
<p><img src="image-36.png#center" alt="alt text"></p>
<p><strong><em>password</em></strong>: <code>kSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx</code></p>
<hr>
<h4 id="level-16---17">Level 16 -&gt; 17</h4>
<p>The credentials for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL/TLS and which don’t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it.</p>
<p><img src="image-37.png#center" alt="alt text">
I used <strong><em>nmap</em></strong> to scan open ports in the range 31000 to 32000 on localhost and found 5 open ports. However, if you look closely under the port <strong>31790</strong>, it writes <strong>Wrong! Please enter the correct current password.</strong> implying a high possibility that it is the port that we are looking for.</p>
<br>
<p><img src="image-38.png#center" alt="alt text">
<code>openssl s_client -connect localhost:31790</code></p>
<p>I typed the correct password but it kept returning <strong>KEYUPDATE</strong>.</p>
<br>
<p><img src="image-43.png#center" alt="alt text">
<code>openssl s_client -connect localhost:31790 -ign_eof</code></p>
<p>The <code>KEYUPDATE</code> output was returned before because the <strong><em>KeyUpdate</em></strong> operation is traggered via <code>K</code>/<code>k</code> and the password included a <code>K</code>. You can switch off the interactive commands using the <code>-ign_eof</code> option. After correcting the command, I was able to obtain the RSA Private Key.</p>
<br>
<p><img src="image-44.png#center" alt="alt text">
navigated to the <strong>/tmp</strong> directory because I don&rsquo;t have the permission to create a file in the current working directory. Created a new file called <strong><em>ssh.private</em></strong> using <code>vim</code>.</p>
<br>
<p><img src="image-45.png#center" alt="alt text">
Transferred the file from the SSH server to my local machine using the <code>scp</code> command.</p>
<br>
<p><img src="image-46.png#center" alt="alt text">
change the file permissions so the user can only have access to the file.</p>
<br>
<p><img src="image-47.png#center" alt="alt text">
logged into the SSH server using the private key file instead of password.</p>
<br>
<p><img src="image-48.png#center" alt="alt text">
I know I could use the private key to log in but I grabbed the password to bandit17 that&rsquo;s located in the following path just in case: <code>/etc/bandit_pass/bandit17</code></p>
<br>
<p><strong><em>password</em></strong>: <code>EReVavePLFHtFlFsjn3hyzMlvSuSAcRD</code></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>[TIL] Key Exchange</title>
      <link>http://localhost:1313/posts/til-key-exchange/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate><author>leewookb@gmail.com (Wook Lee)</author>
      <guid>http://localhost:1313/posts/til-key-exchange/</guid>
      <description>&lt;h4 id=&#34;what-is-a-key-exchange&#34;&gt;What is a Key Exchange?&lt;/h4&gt;
&lt;p&gt;A key exchange is a method used in cryptography to securely exchange cryptographic keys between two parties. These keys are then used to encrypt and decrypt messages, ensuring that the communication remains private and secure. The primary challenge in key exchange is to do this securely over an insecure communication channel, such as the internet.&lt;/p&gt;
&lt;h4 id=&#34;what-is-diffie-hellman-key-exchange&#34;&gt;What is Diffie-Hellman Key Exchange?&lt;/h4&gt;
&lt;p&gt;The Diffie-Hellman key exchange is one of the earliest and most widely used methods for securely exchanging cryptographic keys. It allows two parties to generate a shared secret over an insecure channel without having to transmit the secret itself.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h4 id="what-is-a-key-exchange">What is a Key Exchange?</h4>
<p>A key exchange is a method used in cryptography to securely exchange cryptographic keys between two parties. These keys are then used to encrypt and decrypt messages, ensuring that the communication remains private and secure. The primary challenge in key exchange is to do this securely over an insecure communication channel, such as the internet.</p>
<h4 id="what-is-diffie-hellman-key-exchange">What is Diffie-Hellman Key Exchange?</h4>
<p>The Diffie-Hellman key exchange is one of the earliest and most widely used methods for securely exchanging cryptographic keys. It allows two parties to generate a shared secret over an insecure channel without having to transmit the secret itself.</p>
<p><strong><em>Simplified example</em></strong>: Alice and Bob want to talk securely. They want to establish a common key, so they can use symmetric cryptography, but they don&rsquo;t want to use key exchange with asymmetric cryptography. This is where Diffie Hellman Key Exchange comes in.</p>
<p>Alice and Bob both have secrets that they generate, let&rsquo;s call these <code>A</code> and <code>B</code>. They also have some common material that&rsquo;s public, let&rsquo;s call this <code>C</code>.</p>
<p>Alice and Bob will combine their secrets with the common material and form <code>AC</code> and <code>BC</code>. They will then send these to each other, and combine that with their secrets to form two identical keys, both <code>ABC</code>. Now they can use this key to communicate.</p>
<hr>
<p>The <strong><em>Diffie-Hellman key exchange</em></strong> was explained in detail by the famous YouTube channel, <code>Computerphile</code>, in the following video:</p>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/NmM9HA2MQGI?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

]]></content:encoded>
    </item>
    <item>
      <title>[TIL] Subnetting 2</title>
      <link>http://localhost:1313/posts/til-subnetting-2/</link>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0000</pubDate><author>leewookb@gmail.com (Wook Lee)</author>
      <guid>http://localhost:1313/posts/til-subnetting-2/</guid>
      <description>&lt;div style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;./image-30.png&#34;&gt;&lt;/div&gt;
&lt;p&gt;Divide the &lt;code&gt;192.168.1.0/24&lt;/code&gt; network into 4 subnets that can accommodate 45 number of hosts.&lt;/p&gt;
&lt;p&gt;First, we determined that the prefix length needs to be &lt;code&gt;/26&lt;/code&gt; because each subnet must be able to include 45 hosts. The formula to calculate the number of hosts is &lt;code&gt;2^n - 2&lt;/code&gt;, where n is the number of host bits. If there are 5 host bits, then 2^5 - 2 = 30, which is not enough to include 45 hosts. Therefore, we need 2^6 - 2 = 62, which isn&amp;rsquo;t exactly 45 but is sufficient. To accommodate 45 hosts, we need 6 host bits. This makes the prefix length /26, since we subtract the 6 host bits from the total address length of 32.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: center"><img src="./image-30.png"></div>
<p>Divide the <code>192.168.1.0/24</code> network into 4 subnets that can accommodate 45 number of hosts.</p>
<p>First, we determined that the prefix length needs to be <code>/26</code> because each subnet must be able to include 45 hosts. The formula to calculate the number of hosts is <code>2^n - 2</code>, where n is the number of host bits. If there are 5 host bits, then 2^5 - 2 = 30, which is not enough to include 45 hosts. Therefore, we need 2^6 - 2 = 62, which isn&rsquo;t exactly 45 but is sufficient. To accommodate 45 hosts, we need 6 host bits. This makes the prefix length /26, since we subtract the 6 host bits from the total address length of 32.</p>
<p>The network address of <code>subnet 1</code> is 192.168.1.0/26. To find the broadcast address of subnet 1, we first convert the subnet 1 address to binary:
<code>11000000.10101000.00000001.00000000</code></p>
<p>Then, we change all the Host ID bits to 1, leaving the Network ID bits unchanged:
<code>11000000.10101000.00000001.00111111</code></p>
<p>Converting these binary bits back to dotted decimal format gives us the broadcast address (the highest address in this subnet) of subnet 1.
<code>192.168.1.63/26</code>.</p>
<p>So, the address range of subnet1 is 192.168.1.0 - 192.168.1.63.</p>
<p>The network address of <code>subnet 2</code> will be 1 higher than the broadcast address of <code>subnet 1</code>. So, 192.168.1.64/26.</p>
<p>192.168.1.64 in binary is <code>11000000.10101000.00000001.01000000</code>.
Covert all the host bits to 1s. <code>11000000.10101000.00000001.01111111</code></p>
<p>Convert the binary bits back to dotted decimal and it becomes <code>192.168.1.127</code>.</p>
<p>The address range of subnet 2 is 192.168.1.64 to 192.168.1.127.</p>
<p>You might have noticed that each subnet is 64 bits apart. To find next subnet&rsquo;s network address, simply add this value to the current subnet.</p>
<p>Take the image below as an example.</p>
<div style="text-align: center"><img src="./image-31.png"></div>
<p>Let&rsquo;s just focus on the last octet here. The last octet in binary is <code>00000000</code>. The first 2 bits is the network ID, which we borrowed to expand the network ID and the last 6 bits is the host ID. The trick to find each subnet&rsquo;s network address is to remember the value of last bit of the network portion, which is 64, in this case.</p>
<br>
<br>
<br>
<div style="text-align: center"><img src="./image-32.png"></div>
For the number of subnets, each additional bit that you borrow doubles the number of subnets.
<h3 id="subnetting-class-b-networks">Subnetting Class B Networks</h3>
<ol>
<li>
<p>You have been given the 172.16.0.0/16 network. You are asked to create 80 subnets for your company&rsquo;s various LANs. What prefix length should you use?</p>
<p>2^x = number of subnets, where x is the number of &lsquo;borrowed&rsquo; bits.</p>
</li>
</ol>
<div style="text-align: center"><img src="./image-33.png"></div>
we have to borrow 7 bits. 16 + 7 = /23.
<ol start="2">
<li>You have been given the <code>172.22.0.0/16</code> network. You are required to divide the network into 500 separate subnets. What prefix should you use?</li>
</ol>
<p>First of all, looking at the /16 prefix length, it seems like subnetting needs to be done in a Class B network. To create 500 subnets, we need to determine how many bits to borrow.</p>
<p>2^8 is 256, and 2^9 is 512. Therefore, we need to borrow 9 bits. Starting from a Class B network, which has a /16 prefix length, we add 9 bits to get a /25 prefix length. This means we should use a /25 prefix length.</p>
<ol start="3">
<li>You have been given the <code>172.18.0.0/16</code> network. Your company requires 250 subnets with the same number of hosts per subnet. What prefix length should you use?</li>
</ol>
<p><code>/24</code> . 2^8 = 256 subnets could be made. Also /24 prefix length will leave 8, the number of host bits which could lead to 2^8 - 2, 254.</p>
<ol start="4">
<li>
<p>What subnet does host 172.25.217.192/21 belong to?</p>
<p>Let&rsquo;s convert <code>172.25.217.192</code> to binary bits.
10101100.00011001.11011001.11000000</p>
<p>change all of the host bits to 0.
10101100.00011001.11011000.00000000</p>
<p>change it back to dotted decimal.
172.25.216.0/21</p>
</li>
</ol>
<h3 id="quiz">Quiz</h3>
<hr>
<p>Q1. You have been given the <code>172.30.0.0/16</code> network. Your company requires 100 subnets with at least 500 hosts per subnet. What prefix length should you use?</p>






<pre tabindex="0"><code>/23</code></pre>
<br>
<p>Q2. What subnet does host <code>172.21.111.201/20</code> belong to?</p>






<pre tabindex="0"><code>172.21.96.0/20</code></pre>
<ul>
<li>Convert the address to binary: <code>10101100.00010101.01101111.11001001</code></li>
<li>Change the host bits to 0s. Since the prefix length is <code>/20</code> , we can set the last 12 bits to 0s: <code>10101100.00010101.01100000.00000000</code></li>
<li>Convert the binary bits back to dotted decimal: <code>172.21.96.0/20</code></li>
</ul>
<br>
<p>Q3. What is the broadcast address of the network 192.168.91.78/26 belongs to?</p>






<pre tabindex="0"><code>192.168.91.127/26</code></pre>
<ul>
<li>Convert the address to binary bits:
<ul>
<li><code>11000000.10101000.01011011.01001110</code>.</li>
</ul>
</li>
<li>Change all of the host bits to 0s to find the network address of the subnet:
<ul>
<li><code>11000000.10101000.01011011.01000000</code>.</li>
</ul>
</li>
<li>Change all of the host bits to 1s to find the broadcast address of the subnet:
<ul>
<li><code>11000000.10101000.01011011.01111111</code>.</li>
</ul>
</li>
<li>Change the binary bits back to dotted decimal
<ul>
<li>network address: 192.168.91.64/26</li>
<li>broadcast address: 192.168.91.127/26</li>
</ul>
</li>
</ul>
<br>
<p>Q4. You divide the <code>172.16.0.0/16</code> network into 4 subnets of equal size. Identify the network and broadcast addresses of the second subnet.</p>






<pre tabindex="0"><code>network address: 172.16.64.0/18
broadcast address: 172.16.127.255/18</code></pre>
<ul>
<li>The original subnet mask for a /16 network is 255.255.0.0.</li>
<li>Dividing into 4 subnets require 2 additional bits for subnetting (2^2 = 4).</li>
<li>This changes the subnet mask to 255.255.192.0 /18.</li>
<li>The original network 172.16.0.0/16 is divided as follows with a /18 mask:
<ul>
<li>subnet1: 172.16.0.0/18</li>
<li>subnet2: 172.16.64.0/18</li>
<li>subnet3: 172.16.128.0/18</li>
<li>subnet4: 172.16.192.0/18</li>
</ul>
</li>
<li>We know that subnet 2&rsquo;s broadcast address is just 1 below subnet 3&rsquo;s network address: 172.16.127.255/18</li>
</ul>
<br>
<p>Q5. You divide the 172.30.0.0/16 network into subnets of 1000 hosts each. How many subnets are you able to make?</p>






<pre tabindex="0"><code>64</code></pre>
<p>To divide the network into subnets that each accommodate 1,000 hosts, we first need to determine how many bits are required for the hosts. The formula for calculating the number of hosts is <code>2^n - 2</code>, where n is the number of host bits. If we use 10 bits for the hosts, we get 2^10 - 2 = 1,022 hosts, which is more than enough.</p>
<p>The maximum prefix length is /32. Subtracting the 10 host bits from 32 gives us a prefix length of /22. Therefore, the subnet mask of the subnets will be /22. The original subnet mask was /16, so we&rsquo;ve borrowed 6 bits from the original network for subnetting. With these 6 additional bits, we can create 64 (2^6) subnets.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[TIL] Subnetting</title>
      <link>http://localhost:1313/posts/til-subnetting/</link>
      <pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><author>leewookb@gmail.com (Wook Lee)</author>
      <guid>http://localhost:1313/posts/til-subnetting/</guid>
      <description>&lt;p&gt;Today marks day 13 of studying CCNA with Jeremy&amp;rsquo;s IT Lab. Today&amp;rsquo;s topic was subnetting. Even though the topic was challenging to grasp at first, it&amp;rsquo;s really interesting how people came up with such ideas to efficiently utilize the IP addressing system. People are geniuses!&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;ipv4-address-classes&#34;&gt;IPv4 Address Classes&lt;/h3&gt;
&lt;p&gt;There are 5 different IPv4 classes&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;./ip table.png&#34;&gt;&lt;/div&gt;
&lt;p&gt;A &lt;code&gt;subnet&lt;/code&gt; refers to a portioned network within an IP address that divides the network area. The tool used to create these subnets is called a &lt;code&gt;Subnet Mask&lt;/code&gt;. In other words, the Subnet Mask serves to separate the Network ID and the Host ID within the IP address system.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Today marks day 13 of studying CCNA with Jeremy&rsquo;s IT Lab. Today&rsquo;s topic was subnetting. Even though the topic was challenging to grasp at first, it&rsquo;s really interesting how people came up with such ideas to efficiently utilize the IP addressing system. People are geniuses!</p>
<hr>
<h3 id="ipv4-address-classes">IPv4 Address Classes</h3>
<p>There are 5 different IPv4 classes</p>
<div style="text-align: center"><img src="./ip table.png"></div>
<p>A <code>subnet</code> refers to a portioned network within an IP address that divides the network area. The tool used to create these subnets is called a <code>Subnet Mask</code>. In other words, the Subnet Mask serves to separate the Network ID and the Host ID within the IP address system.</p>
<p>For example, as shown in the image above, a <code>Class C</code> network has the first 24 bits representing the Network ID and the last 8 bits representing the Host ID. In this case, the actual number of assignable hosts within the 8-bit Host ID is 2^8 - 2 = 254.</p>
<p>The formula for the actual number of assignable hosts is <code>2^n - 2</code>, where n is the number of bits in the Host ID. But why do we subtract 2? This is because we must exclude the <code>Network Address</code> and the <code>Broadcast Address</code>. These two addresses cannot be assigned to hosts.</p>
<br>
<h3 id="cidr-classless-inter-domain-routing">CIDR (Classless Inter-Domain Routing)</h3>
<p>The class system has a critical problem, that is, it wastes a lot of IP addresses. When the Internet was first created, the creators did not predict that the Internet would become as large as it is today. This resulted in wasted address space.</p>
<p>The IETF (Internet Engineering Task Force) introduced CIDR in 1993 to replace the &lsquo;classful&rsquo; addressing system.</p>
<p>With CIDR, the requirements of</p>
<ul>
<li>Class A = /8</li>
<li>Class B = /16</li>
<li>Class C = /24</li>
</ul>
<p>were removed. This allowed larger networks to be split into smaller networks, allowing greater efficiency. These small networks are called <code>subnetworks</code> or <code>subnets</code> .</p>
<br>
<p>Wasted IP addresses example</p>
<div style="text-align: center"><img src="./image-23.png"></div>
<p>Here, we have two routers that we want to connect. This network is a <code>point-to-point</code> network, so we don&rsquo;t need many network blocks. Therefore, we allocate a Class C network. Since we allocated a Class C network, the Network ID will be 24 bits, and the Host ID will be 8 bits, giving us a total of 2^8 = 256 addresses. However, subtracting the network address (203.0.113.0) and the broadcast address (203.0.113.255), we have a total of 254 usable addresses.</p>
<p>But let&rsquo;s say we are using the classful addressing system without CIDR introduced. In this case, out of the 254 addresses, if we assign one address to R1 (e.g., 203.0.113.1) and one address to R2 (e.g., 203.0.113.2), then 252 addresses will be unused and wasted.</p>
<p>Let&rsquo;s look at another example.</p>
<p>Company X needs IP addresses to connect 5000 end hosts. Since Class C can only allocate 2^8-2, or 254 addresses, we would have to allocate a Class B to X. A Class B provides 2^16-2, or 65,534 addresses. This means Company X, which only needs 5000 addresses, would waste over 60,000 IP addresses.</p>
<h3 id="subnetting">Subnetting</h3>
<div style="text-align: center"><img src="./image-24.png"></div>
<p>Due to the waste of too many IP addresses, subnetting is essential. Returning to the same example, let&rsquo;s assign IP addresses to this point-to-point network using <code>/30</code> (which is a subnet of that larger Class C network).</p>
<p>203.0.113.0/30 includes addresses from 203.0.113.0 to 203.0.113.3. When converted to binary, the IP addresses are as follows:</p>
<ul>
<li>203.0.113.0 = 11001011.00000000.01110001.00000000</li>
<li>203.0.113.1 = 11001011.00000000.01110001.00000001</li>
<li>203.0.113.2 = 11001011.00000000.01110001.00000010</li>
<li>203.0.113.3 = 11001011.00000000.01110001.00000011</li>
</ul>
<p>We assign 203.0.113.1 and 203.0.113.2 to R1 and R2, respectively. (Since this was a point-to-point network, we could also use /31 instead of /30 since poin-to-point networks do not need 2 extra addresses for network and broadcast addresses.)
Earlier, we mentioned that <code>/30</code> is a subnet of the <code>/24</code> address. So, what happens to the remaining addresses from 203.0.113.4 to 203.0.113.255 in the 203.0.113.0/24 network? These remaining addresses can be used in other subnets to prevent any waste of IP address.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[TIL] Life of a Packet</title>
      <link>http://localhost:1313/posts/til-life-of-a-packet/</link>
      <pubDate>Mon, 24 Jun 2024 00:00:00 +0000</pubDate><author>leewookb@gmail.com (Wook Lee)</author>
      <guid>http://localhost:1313/posts/til-life-of-a-packet/</guid>
      <description>&lt;p&gt;Today, while studying for my CCNA with Jeremy&amp;rsquo;s IT Lab YouTube videos, I learned something very useful that I can&amp;rsquo;t help but write about because I want to remember it for a long time and make the knowledge mine.&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;./pepe-internet.gif&#34;&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;The image below is the network topology used in the Lab.&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;./image15.png&#34;&gt;&lt;/div&gt;
&lt;p&gt;PC1 pings PC4.&lt;/p&gt;
&lt;p&gt;Identify the source/destination MAC address at each specified point in the route to PC4.
Identify the MAC address by the device and interface (ie. the MAC of R1 G0/0)
&lt;/br&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Today, while studying for my CCNA with Jeremy&rsquo;s IT Lab YouTube videos, I learned something very useful that I can&rsquo;t help but write about because I want to remember it for a long time and make the knowledge mine.</p>
<div style="text-align: center"><img src="./pepe-internet.gif"></div>
<hr>
<p>The image below is the network topology used in the Lab.</p>
<div style="text-align: center"><img src="./image15.png"></div>
<p>PC1 pings PC4.</p>
<p>Identify the source/destination MAC address at each specified point in the route to PC4.
Identify the MAC address by the device and interface (ie. the MAC of R1 G0/0)
</br></p>
<h5 id="q1-sourcedestination-mac-addresses-at-pc1--sw1-segment">Q1. Source/Destination MAC addresses at PC1 → SW1 segment</h5>






<pre tabindex="0"><code>Source MAC Address: 1111
Destination MAC Address: AAAA</code></pre>






<pre tabindex="0"><code>C:\&gt;ipconfig /all

FastEthernet0 Connection:(default port)

Connection-specific DNS Suffix..:
Physical Address................: 00D0.BA11.1111
Link-local IPv6 Address.........: FE80::2D0:BAFF:FEE1:6988
IPv6 Address....................: ::
IPv4 Address....................: 192.168.1.1
Subnet Mask.....................: 255.255.255.0
Default Gateway.................: ::
192.168.1.254
DHCP Servers....................: 0.0.0.0
DHCPv6 IAID.....................:
DHCPv6 Client DUID..............: 00-01-00-01-09-99-E5-2C-00-D0-BA-11-11-11
DNS Servers.....................: ::
0.0.0.0</code></pre>
<p>the last four digits of PC1&rsquo;s MAC Address is <code>1111</code> . We are sending a packet from PC1 to PC4, which means the source IP Address is <code>192.168.1.1</code> (PC1&rsquo;s IP Address) and the destination IP Address is <code>192.168.3.1</code> (PC4&rsquo;s IP Address). The source and destination IP Address remain unchanged throughout the communication. Because PC4 is located on a different network, PC1 will encapsulate the packet with an Ethernet header and the destination MAC address will be the MAC address of its <code>default gateway</code>. In this case, it&rsquo;s R1&rsquo;s g0/0 interface. It will be the destination MAC address.</p>






<pre tabindex="0"><code>R1&gt;enable
R1#show interfaces g0/0
GigabitEthernet0/0 is up, line protocol is up (connected)
Hardware is CN Gigabit Ethernet, address is 0000.01aa.aaaa (bia 00d0.ff77.0101)</code></pre>
<p>The last four digits of R1&rsquo;s g0/0 interface MAC address is <code>aaaa</code> .</p>
<div style="text-align: center"><img src="./image16.png"></div>
<br/>
<h5 id="q2-sourcedestination-mac-addresses-at-sw1--r1-segment">Q2. Source/Destination MAC addresses at SW1 → R1 segment.</h5>






<pre tabindex="0"><code>Source MAC Address: 1111
Destination MAC Address: AAAA</code></pre>
<p>The Source/Destination MAC addresses at SW1 to R1 segment should be the same as Q1. Switches do not change the source and destination MAC addresses in the frame. It will simply use the source MAC address field in the Ethernet header to learn PC1&rsquo;s MAC address if it doesn&rsquo;t already know it, and then forward the frame to the proper destination, or flood it if it hasn&rsquo;t learned the destination MAC address yet.</p>
<br/>
<h5 id="q3-sourcedestination-mac-addresses-at-r1--r2-segment">Q3. Source/Destination MAC addresses at R1 → R2 segment</h5>






<pre tabindex="0"><code>Source MAC address: BBBB
Destination MAC address: CCCC</code></pre>
<p>Like I already mentioned, the source and destination IP addresses will remain the same, as R1 encapsulates the packet with an Ethernet header, it will use the MAC address of its g0/1 interface as the source MAC address and the MAC address of R2&rsquo;s g0/0 interface, which is the next hop in the route, as the destination MAC address.</p>
<div style="text-align: center"><img src="./image17.png"></div>
<p>The last four digits of R1&rsquo;s g0/1 interface MAC address is <code>BBBB</code>.</p>
<div style="text-align: center"><img src="./image18.png"></div>
<p>The last four digits of R2&rsquo;s g0/0 interface MAC address is <code>CCCC</code>.</p>
<div style="text-align: center"><img src="./image19.png"></div>
<p>Here, on Cisco Packet Tracer, we can confirm the source/destination MAC address on the Ethernet header in Layer 2.</p>
<br/>
<h5 id="q4-sourcedestination-mac-addresses-at-r2--r3-segment">Q4. Source/Destination MAC addresses at R2 → R3 segment.</h5>






<pre tabindex="0"><code>Source MAC address: DDDD
Destination MAC address: EEEE</code></pre>
<p>The source MAC address will be R2&rsquo;s interface g0/1 and the destination MAC address will be R3&rsquo;s interface g0/0.</p>
<div style="text-align: center"><img src="./image20.png"></div>
<p>The last four digits of R2&rsquo;s interface g0/1 MAC address is <code>DDDD</code>.</p>
<div style="text-align: center"><img src="./image21.png"></div>
<p>The last four digits of R3&rsquo;s interface g0/0 MAC address is <code>EEEE</code>.</p>
<div style="text-align: center"><img src="./image22.png"></div>
<br/>
<h5 id="q5-e-sourcedestination-mac-addresses-at-r3--sw2-segment">Q5. E. Source/Destination MAC addresses at R3 → SW2 segment.</h5>






<pre tabindex="0"><code>Source MAC address: FFFF
Destination MAC address: 4444</code></pre>
<p>At this point, the destination IP address is part of a network connected to R3, <code>192.168.3.0/24</code> , so R3 knows it can send the packet directly to PC4. So, it will set the destination MAC address to PC4&rsquo;s MAC address, and use its own address as the source.</p>
<p>The source MAC address will be R3&rsquo;s g0/1 interface, which is <code>FFFF</code> .</p>
<div style="text-align: center"><img src="./image23.png"></div>
<p>The destination MAC address will be PC4&rsquo;s MAC address, which turned out to be <code>4444</code> (the last 4 digits).</p>






<pre tabindex="0"><code>Cisco Packet Tracer PC Command Line 1.0
C:\&gt;ipconfig /all

FastEthernet0 Connection:(default port)

Connection-specific DNS Suffix..:
Physical Address................: 000C.8544.4444
Link-local IPv6 Address.........: FE80::20C:85FF:FEC4:BDB4
IPv6 Address....................: ::
IPv4 Address....................: 192.168.3.1
Subnet Mask.....................: 255.255.255.0
Default Gateway.................: ::
192.168.3.254
DHCP Servers....................: 0.0.0.0
DHCPv6 IAID.....................:
DHCPv6 Client DUID..............: 00-01-00-01-2D-AC-7E-D8-00-0C-85-44-44-44
DNS Servers.....................: ::
0.0.0.0</code></pre>
<br/>
<h5 id="q6-sourcedestination-mac-addresses-at-sw2--pc4-segment">Q6. Source/Destination MAC addresses at SW2 → PC4 segment.</h5>






<pre tabindex="0"><code>Source MAC address: FFFF
Destination MAC address: 4444</code></pre>
<p>The answer for Q6 is the same as Q5 because the SW2 only forwards the frame. The switch does not alter the source or destination MAC addresses in the Ethernet frame. The switch&rsquo;s role is to efficiently forward the frame to the correct destination based on its MAC address table. If it doesn&rsquo;t already know the destination MAC address, it will flood the frame.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[TIL] Port</title>
      <link>http://localhost:1313/posts/til-port/</link>
      <pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate><author>leewookb@gmail.com (Wook Lee)</author>
      <guid>http://localhost:1313/posts/til-port/</guid>
      <description>&lt;p&gt;I feel like I&amp;rsquo;ve only scratched the surface when it comes to understanding Ports. Since I have an interview coming up, I want to review the basics of Ports, even if it&amp;rsquo;s very fundamental.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;what-is-a-port&#34;&gt;What is a port?&lt;/h3&gt;
&lt;p&gt;From Wikipedia&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a port is a number assigned to uniquely identify a connection endpoint and to direct data to a specific service.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To simply put, a port is like an address for a specific program or service running on a computer.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I feel like I&rsquo;ve only scratched the surface when it comes to understanding Ports. Since I have an interview coming up, I want to review the basics of Ports, even if it&rsquo;s very fundamental.</p>
<hr>
<h3 id="what-is-a-port">What is a port?</h3>
<p>From Wikipedia</p>
<blockquote>
<p>a port is a number assigned to uniquely identify a connection endpoint and to direct data to a specific service.</p>
</blockquote>
<p>To simply put, a port is like an address for a specific program or service running on a computer.</p>
<p>An IP address identifies a device on a network, while a port number identifies a specific process or service running on that device. When data is sent over a network, the IP address directs the data to the correct device, and the port number ensures it reaches the correct application or service on that device.</p>
<p>Because a computer runs multiple processes simultaneously, not just a single one, it is import to distinguish between them. For example, on my computer right now, I have multiple Google Chrome tabs open, Discord running, and I&rsquo;m listening to music on Spotify.</p>
<p>So, let&rsquo;s say we want to communicate with a program on an external server. Assuming we know its IP address, if we don&rsquo;t know its port number, we won&rsquo;t be able to locate the specific program we want to communicate with.</p>
<h3 id="why-do-we-not-specify-the-port-numbers-in-the-browser">Why do we not specify the port numbers in the browser?</h3>
<p>It is said that to communicate with a specific server, you need to know both the IP address and the port number. Through the domain address, you can only find out the IP address. So, how can we communicate normally without entering the port number?</p>
<p>When you enter a domain address in the address bar and press enter, the browser is set to send the communicate to port 80 by default. That&rsquo;s why you don&rsquo;t need to enter the port number. If you don&rsquo;t want to communicate through port 80, you can set the port number separately in the address bar.</p>
<h3 id="there-are-total-65535-ports">There are total 65,535 ports.</h3>
<ul>
<li>Port numbers 0 - 1023 are called <code>System or Well-known</code> ports.</li>
<li>Port numbers 1024 - 49151 are called <code>User</code> or <code>Registered</code> ports.</li>
<li>Port numbers 49152-65535 are called <code>Dynamic</code> or <code>Private</code> ports.</li>
</ul>
<hr>
<p>Now it all makes sense. When we are doing a CTF, the first thing we always do in the enumeration phase is utilize the <code>nmap</code> command to perform port scanning. This helps us identify open ports and see which services are running on them. The target might be running several programs, and we need to find and confirm which programs/services are running and identify corresponding vulnerabilities.</p>
]]></content:encoded>
    </item>
    <item>
      <title>[TIL] Routing</title>
      <link>http://localhost:1313/posts/til-routing/</link>
      <pubDate>Tue, 18 Jun 2024 00:00:00 +0000</pubDate><author>leewookb@gmail.com (Wook Lee)</author>
      <guid>http://localhost:1313/posts/til-routing/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m currently studying for the CCNA exam, primarily using Jeremy&amp;rsquo;s IT Lab YouTube channel. He&amp;rsquo;s well-known for providing great CCNA content, and the best part is that it&amp;rsquo;s all free on YouTube. Jeremy also offers Anki flashcards, which I absolutely love and use daily, as well as Cisco Packet Tracer, which is an excellent resource for hands-on practice. I plan to take the exam in 3 to 4 months, though this timeline might change depending on my study and preparation progress.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I&rsquo;m currently studying for the CCNA exam, primarily using Jeremy&rsquo;s IT Lab YouTube channel. He&rsquo;s well-known for providing great CCNA content, and the best part is that it&rsquo;s all free on YouTube. Jeremy also offers Anki flashcards, which I absolutely love and use daily, as well as Cisco Packet Tracer, which is an excellent resource for hands-on practice. I plan to take the exam in 3 to 4 months, though this timeline might change depending on my study and preparation progress.</p>
<p>Today, I learned about routing.</p>
<h3 id="what-is-routing">What is Routing?</h3>
<hr>
<p>Definition:</p>
<blockquote>
<p>Routing is the process that routers use to determine the path that IP packets should take over a network to reach their destination.</p>
</blockquote>
<p>When a router receives a packet, it&rsquo;s the router&rsquo;s job to forward it to the correct destination.</p>
<p>Routers store routes to all of their known destinations in a <code>Routing table</code>.</p>
<p>Switches keep a MAC address table with their known destination MAC addresses, and routers keep a routing table with their known destination networks.</p>
<p>When routers receive packets, they look in the routing table to find the best route to forward the packet.</p>
<p>There are two main routing methods:</p>
<ul>
<li>
<p><code>dynamic routing</code>: Routers use dynamic protocols (i.e., OSPF) to share routing information with each other automatically and build their routing tables.</p>
</li>
<li>
<p><code>static routing</code>: A network engineer/admin manually configures routes on the router.
But before we go into routing methods,</p>
</li>
</ul>
<h3 id="what-exactly-is-a-route">What exactly is a route?</h3>
<hr>
<p>Basically, it&rsquo;s an instruction to the router.</p>
<p>A route tells the router:</p>
<ul>
<li>To send a packet to destination X, you should send the packet to next-hop Y.</li>
<li>or, if the destination is directly connected to the router, send the packet directly to the destination.</li>
<li>or, if the destination is the router&rsquo;s own IP address, receive the packet for yourself (don&rsquo;t forward it).</li>
</ul>
<p>Also, there are few types of routes found in routing tables.</p>
<ol>
<li><code>Connected routes</code></li>
<li><code>Local routes</code></li>
</ol>
<p><code>Connected Routes</code></p>
<ul>
<li>These are routes that are directly connected to a router&rsquo;s interface.</li>
<li>they are automatically created when an interface is configured with an IP address and brought up. Connected routes are essential for a router to communicate with devices on the directly attached network.</li>
</ul>
<p><code>Local Routes</code></p>
<ul>
<li>These are routes to the IP addresses assigned to the router&rsquo;s own interfaces.</li>
<li>Local routes are used to specify that the router can directly reach its own IP addresses. They have the highest priority in the routing table since the router must be able to communicate with its own interfaces.</li>
<li><code>/32</code> netmask is used to specify the exact IP address of the interface.</li>
</ul>
<p>There&rsquo;s a special kind of static route called a <code>default route</code>.</p>
<p>This is a route that you configure inside the router that says, if nothing else matches inside of our routing table, send the traffic this way.</p>
<p>It&rsquo;s also known as the &ldquo;gateway of last resort&rdquo;</p>
<p>A default route is a route to <code>0.0.0.0/0</code></p>
<ul>
<li><code>/0</code> means that all bits of the netmask are 0, so none of the bits of the addresses are fixed. They can all change to be either 0 or 1.</li>
<li><code>0.0.0.0/0</code> is the least specific route possible; it includes every possible destination IP address.</li>
<li>If the router doesn&rsquo;t have any more specific routes that match a packet&rsquo;s destination IP address, the router will forward the packet using the default route.</li>
</ul>
<ul>
<li>A default route is often used to direct traffic to the Internet.
<ul>
<li>More specific routes are used for destinations in the internal corporate network.</li>
<li>Traffic to destinations outside of the internal network is sent to the Internet.</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
